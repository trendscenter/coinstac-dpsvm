{
  "meta": {
    "name": "Differentially Private Support Vector Machines Demo",
    "id": "dpsvm",
    "version": "v1.0.0",
    "repository": "https:\/\/github.com\/MRN-Code\/coinstac_dpSVM",
    "description": "A test from single shot regresssion"
  },
  "computation": {
    "type": "docker",
    "dockerImage": "dpsvm",
    "command": [
      "python",
      "\/computation\/scripts\/local.py"
    ],
    "remote": {
      "type": "docker",
      "dockerImage": "dpsvm",
      "command": [
        "python",
        "\/computation\/scripts\/remote.py"
      ]
    },
    "input": {
      "covariates":   
      {
        "label": "Covariates",
        "description": "Demographic or medical features (e.g., isControl, sex, age)",    
        "type": "array",
        "items": ["boolean", "number"],
        "order": 1
      },    
      "data": 
      {
        "label": "Measurements",
        "description": "Files containing brain region measurements (e.g., FreeSurfer files)", 
        "items": ["FreeSurfer"],
        "extensions": [["csv", "txt"]],
        "order": 0
      },
      "label":   
      {
        "label": "Label", 
        "description": "The binary label to predict",  
        "type": "string",
        "source": "owner",
        "order": 1
      },    
      "model_local":
      {
        "default": "SVM",
        "label": "Model_local",
        "description": "Binary classification model: SVM / LR",
        "type": "string",
        "source": "owner",
        "order": 4
      },   
      "is_private_local":
      {
        "default": true,
        "label": "Is_private_local",
        "description": "Private or public version of model",
        "type": "boolean",
        "source": "owner", 
        "order": 4
      },   
      "perturb_method_local":
      {
        "default": "objective",
        "label": "Perturb_method_local",
        "description": "Perturbation method for conserving privacy: objective / output, not needed for public version",
        "type": "string",
        "source": "owner",
        "order": 4
      },         
      "lambda_local":
      {
        "default": 0.01,
        "label": "Lambda_local",
        "description": "Regularization parameter",
        "max": 100, 
        "min": 0, 
        "step": "logrithmic",
        "type": "range",
        "source": "owner",
        "order": 2
      },
      "epsilon_local":
      {
        "default": 1.0,
        "label": "Epsilon_local",
        "description": "Privacy parameter",
        "max": 100.0,
        "min": 0.1,
        "step": 0.01, 
        "type": "range",
        "source": "owner",
        "order": 3
      },
      "huberconst_local":
      {
        "default": 0.5,
        "label": "Huberconst_local",
        "description": "Constant for huber loss",
        "max": 0.5,
        "min": 0.001,
        "step": 0.01,
        "type": "range",
        "source": "owner",
        "order": 3
      },
      "fit_intercept_local":
      {
        "default": true,
        "label": "Fit_intercept_local",
        "description": "Whether to calculate the intercept for the local model. If set to false, intercept = 0 (i.e., local training data is already centered).",
        "type": "boolean",
        "source": "owner", 
        "order": 4
      },       
      "intercept_scaling_local":
      {
        "default": 1.0,
        "label": "Intercept_scaling_local",
        "description": "When fit_intercept_local = true, sample vector x becomes [x, intercept_scaling], i.e., a “synthetic” feature is appended. The intercept (in y = w'x + intercept) becomes intercept_scaling * synthetic feature weight. Note the synthetic feature weight is subject to l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.",
        "max": 1e100,
        "min": 1e-100,
        "step": 0.01,
        "type": "range",
        "source": "owner",
        "order": 3
      },
      "model_owner":
      {
        "default": "SVM",
        "label": "Model_owner",
        "description": "Binary classification model: SVM / LR",
        "type": "string",
        "source": "owner",
        "order": 4
      },   
      "is_private_owner":
      {
        "default": true,
        "label": "Is_private_owner",
        "description": "Private or public version of model",
        "type": "boolean",
        "source": "owner", 
        "order": 4
      },   
      "perturb_method_owner":
      {
        "default": "objective",
        "label": "Perturb_method_owner",
        "description": "Perturbation method for conserving privacy: objective / output, not needed for public version",
        "type": "string",
        "source": "owner",
        "order": 4
      },         
      "lambda_owner":
      {
        "default": 0.01,
        "label": "Lambda_owner",
        "description": "Regularization parameter",
        "max": 100, 
        "min": 0, 
        "step": "logrithmic",
        "type": "range",
        "source": "owner",
        "order": 2
      },
      "epsilon_owner":
      {
        "default": 1.0,
        "label": "Epsilon_owner",
        "description": "Privacy parameter",
        "max": 100.0,
        "min": 0.1,
        "step": 0.01, 
        "type": "range",
        "source": "owner",
        "order": 3
      },
      "huberconst_owner":
      {
        "default": 0.5,
        "label": "Huberconst_owner",
        "description": "Constant for huber loss",
        "max": 0.5,
        "min": 0.001,
        "step": 0.01,
        "type": "range",
        "source": "owner",
        "order": 3
      },
      "fit_intercept_owner":
      {
        "default": true,
        "label": "Fit_intercept_owner",
        "description": "Whether to calculate the intercept for the aggregator model. If set to false, intercept = 0 (i.e., soft predictions are expected to be already centered).",
        "type": "boolean",
        "source": "owner", 
        "order": 4
      },       
      "intercept_scaling_owner":
      {
        "default": 1.0,
        "label": "Intercept_scaling_owner",
        "description": "When fit_intercept_owner = true, soft prediction vector u becomes [u, intercept_scaling], i.e., a “synthetic” feature is appended. The intercept (in y = w'u + intercept) becomes intercept_scaling * synthetic feature weight. Note the synthetic feature weight is subject to l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.",
        "max": 1e100,
        "min": 1e-100,
        "step": 0.01,
        "type": "range",
        "source": "owner",
        "order": 3
      },      
      "train_split":
      {
        "default": 0.8,
        "label": "Train Split",
        "description": "Percentage of data used for training at the owner site",
        "max": 1,
        "min": 0,
        "step": 0.1,
        "type": "number",
        "source": "owner",
        "order": 4
      },
      "shuffle":
      {
        "default": true,
        "label": "Shuffle",
        "description": "Whether shuffle or not when splitting train / test dataset",
        "type": "boolean",
        "source": "owner", 
        "order": 4
      }
    },
    "output": {  
      "regressions": {
        "label": "Regressions",
        "type": "array",
        "items": {
          "global_stats": {
            "label": "Global Stats",
            "type": "object",
            "items": {
              "avg_beta_vector": {
                "label": "Avg Beta Vector",
                "type": "array"
              },
              "r2_global": {
                "label": "R2 Global",
                "type": "number"
              },
              "ts_global": {
                "label": "TS Global",
                "type": "array"
              },
              "ps_global": {
                "label": "PS Global",
                "type": "number"
              },
              "dof_global": {
                "label": "DOF Global",
                "type": "array"
              }
            }
          },
          "local_stats": {
            "label": "Local Stats",
            "type": "object",
            "items": {
              "beta": {
                "label": "Beta",
                "type": "array"
              },
              "pval": {
                "label": "PVal",
                "type": "array"
              },
              "rsquared": {
                "label": "R Squared",
                "type": "number"
              },
              "sse": {
                "label": "SSE",
                "type": "number"
              },
              "tval": {
                "label": "TVal",
                "type": "array"
              }
            }
          },
          "ROI": {
            "label": "Region of Interest",
            "type": "string"
          }
        }
      }
    },
    "display": [ 
      {
        "type": "string",
        "tables": [
          {
            "source": "regressions",
            "subtables": [
              {
                "source": "global_stats",
                "subtitle": "ROI"
              },
              {
                "source": "local_stats",
                "subtitle": "ROI",
                "subtables": "by-key"
              }
            ]
          }
        ]
      }
    ]
  }
}
